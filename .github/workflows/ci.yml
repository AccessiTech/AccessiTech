name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Check code formatting
      run: yarn format:check
    
    - name: Run tests
      run: yarn test
      
    # Temporarily disable coverage checks until more tests are implemented
    # - name: Run tests with coverage
    #   run: yarn test:coverage

    # - name: Check coverage thresholds
    #   run: |
    #     COVERAGE_SUMMARY=$(cat coverage/coverage-summary.json)
    #     LINES_PCT=$(echo $COVERAGE_SUMMARY | jq -r '.total.lines.pct')
    #     STATEMENTS_PCT=$(echo $COVERAGE_SUMMARY | jq -r '.total.statements.pct')
    #     FUNCTIONS_PCT=$(echo $COVERAGE_SUMMARY | jq -r '.total.functions.pct')
    #     BRANCHES_PCT=$(echo $COVERAGE_SUMMARY | jq -r '.total.branches.pct')
    #     
    #     echo "Coverage Summary:"
    #     echo "Lines: $LINES_PCT%"
    #     echo "Statements: $STATEMENTS_PCT%"
    #     echo "Functions: $FUNCTIONS_PCT%"
    #     echo "Branches: $BRANCHES_PCT%"
    #     
    #     if (( $(echo "$LINES_PCT < 80" | bc -l) )) || \
    #        (( $(echo "$STATEMENTS_PCT < 80" | bc -l) )) || \
    #        (( $(echo "$FUNCTIONS_PCT < 80" | bc -l) )) || \
    #        (( $(echo "$BRANCHES_PCT < 80" | bc -l) )); then
    #       echo "❌ Coverage is below 80%"
    #       exit 1
    #     fi
    #     echo "✅ Coverage meets minimum threshold of 80%"

    # Temporarily disable coverage report upload
    # - name: Upload coverage report
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: coverage-report
    #     path: coverage/
    #     retention-days: 14

    # - name: Comment PR with coverage info
    #   if: github.event_name == 'pull_request'
    #   uses: actions/github-script@v6
    #   with:
    #     script: |
    #       const fs = require('fs');
    #       const summary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
    #       const total = summary.total;
    #       
    #       const comment = `## Coverage Report
    #       | Type | Coverage |
    #       |------|----------|
    #       | Lines | ${total.lines.pct}% |
    #       | Statements | ${total.statements.pct}% |
    #       | Functions | ${total.functions.pct}% |
    #       | Branches | ${total.branches.pct}% |
    #       
    #       [View detailed coverage report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
    #       
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.name,
    #         body: comment
    #       });
    
    # - name: Build
    #   run: yarn build:prod
    
    - name: Install wait-on
      run: yarn add -D wait-on
    
    - name: Start dev server
      run: |
        echo "Starting dev server..."
        yarn vite --host 0.0.0.0 --port 5173 > server.log 2>&1 &
        echo "Dev server started with PID: $!"
        sleep 2
        echo "Checking if process is still running..."
        if jobs -r | grep -q "yarn\|vite"; then
          echo "✅ Dev server process is running"
        else
          echo "❌ Dev server process may have failed"
          echo "Server logs:"
          cat server.log || echo "No logs available"
          exit 1
        fi
      
    - name: Wait for server to be ready
      run: |
        echo "Waiting for server at http://localhost:5173..."
        npx wait-on http://localhost:5173 --timeout 90000 --interval 2000 --verbose
        echo "✅ Server is ready!"
    
    - name: Verify server is responding
      run: |
        echo "Testing server response..."
        curl -f http://localhost:5173 || {
          echo "❌ Server is not responding properly"
          echo "Server logs:"
          cat server.log || echo "No logs available"
          echo "Process status:"
          jobs -l || echo "No jobs running"
          exit 1
        }
        echo "✅ Server is responding correctly"
    
    - name: Run axe accessibility tests
      run: |
        yarn add -D @axe-core/cli
        yarn axe 'http://localhost:5173' --exit
    
    - name: Show server logs on failure
      if: failure()
      run: |
        echo "=== Server Logs ==="
        cat server.log || echo "No server logs available"
        echo "=== Process Status ==="
        jobs -l || echo "No jobs running"
